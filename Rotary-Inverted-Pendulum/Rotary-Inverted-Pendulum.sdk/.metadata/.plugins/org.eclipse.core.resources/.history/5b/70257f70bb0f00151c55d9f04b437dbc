/*
 * adversary.c
 *
 *  Created on: Jun 10, 2015
 *      Author: teja
 */

#include "FreeRTOS.h"
#include "task.h"
#include "queue.h"
#include "timers.h"
#include "projdefs.h"
#include "semphr.h"
#include "production_controller.h"
#include "utilities/axi_gpio.h"

static void adversaryTask(void * param);
void voltSweep_timer(xTimerHandle pxTimer);

typedef enum {NONE = 0, DoS=0x1, LIVELOCK=0x2, SET_POINT=0x4, VOLT_SWEET=0x8, COVERT=0x16} attack_menu;

void startAdversaryTask(){
	xTaskCreate(adversaryTask, (signed char*) "Adversary Task", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY, (xTaskHandle *) NULL);
}

static void adversaryTask(void * param){
	attack_menu attacksExecuted = NONE;

	for(;;){
		/*// Execute DoS attack at time 10s
		if(!(attacksExecuted & DoS) && cycleCounter >= 10000){
			xTimerStop(ProductionControlTimer, 0);
			attacksExecuted |= DoS;
		}*/

		// Execute Voltage Sweep at time 30s
		if(!(attacksExecuted & DoS) && cycleCounter >= 10000){
			xTimerStop(ProductionControlTimer, 0);
			attacksExecuted |= DoS;
		}

		taskYIELD();
	}
}

void voltSweep_timer(xTimerHandle pxTimer){
	static float voltage = 0;


	readEncoder(SS_ENCODER_S);
	readEncoder(SS_ENCODER_P);

	writeDAC();
}
